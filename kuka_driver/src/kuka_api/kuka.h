/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _KUKA_H_RPCGEN
#define _KUKA_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#define KUKA_VARNAME_LEN 14
#define KUKA_STRING_LEN 128

typedef float kukaReal_t;

typedef int kukaInt_t;

typedef int kukaBool_t;

typedef char kukaChar_t;

typedef kukaChar_t kukaString_t[KUKA_STRING_LEN];

struct kukaAxis_s {
	kukaReal_t a1;
	kukaReal_t a2;
	kukaReal_t a3;
	kukaReal_t a4;
	kukaReal_t a5;
	kukaReal_t a6;
};
typedef struct kukaAxis_s kukaAxis_s;

typedef kukaAxis_s kukaAxis_t;

struct kukaFrame_s {
	kukaReal_t x;
	kukaReal_t y;
	kukaReal_t z;
	kukaReal_t a;
	kukaReal_t b;
	kukaReal_t c;
};
typedef struct kukaFrame_s kukaFrame_s;

typedef kukaFrame_s kukaFrame_t;

struct kukaPos_s {
	kukaReal_t x;
	kukaReal_t y;
	kukaReal_t z;
	kukaReal_t a;
	kukaReal_t b;
	kukaReal_t c;
	kukaInt_t s;
	kukaInt_t t;
};
typedef struct kukaPos_s kukaPos_s;

typedef kukaPos_s kukaPos_t;

enum kukaErrorType_e {
	KUKA_KUKA_E = 0x001a,
	KUKA_CROSS_E = 0x002a,
	KUKA_RPC_E = 0x003a,
	KUKA_API_E = 0x004a,
};
typedef enum kukaErrorType_e kukaErrorType_e;

typedef kukaErrorType_e kukaErrorType_t;

struct kukaError_s {
	kukaErrorType_t type;
	long no;
	kukaString_t desc;
};
typedef struct kukaError_s kukaError_s;

typedef kukaError_s kukaError_t;

enum kukaType_e {
	KUKA_UNKNOWN = 0x0000,
	KUKA_SIMPLE = 0x0001,
	KUKA_INT = 0x0011,
	KUKA_REAL = 0x0021,
	KUKA_BOOL = 0x0031,
	KUKA_CHAR = 0x0041,
	KUKA_STRING = 0x0051,
	KUKA_STRUCT = 0x0002,
	KUKA_AXIS = 0x0012,
	KUKA_FRAME = 0x0022,
	KUKA_POS = 0x0032,
	KUKA_ERROR = 0x000a,
};
typedef enum kukaType_e kukaType_e;

typedef kukaType_e kukaType_t;

struct kukaVal {
	kukaType_t type;
	union {
		kukaInt_t kukaInt;
		kukaReal_t kukaReal;
		kukaBool_t kukaBool;
		kukaChar_t kukaChar;
		kukaString_t kukaString;
		kukaAxis_t kukaAxis;
		kukaFrame_t kukaFrame;
		kukaPos_t kukaPos;
		kukaError_t kukaError;
	} kukaVal_u;
};
typedef struct kukaVal kukaVal;

struct kukaVar_s {
	char nom[KUKA_VARNAME_LEN];
	kukaVal val;
};
typedef struct kukaVar_s kukaVar_s;

typedef kukaVar_s kukaVar_t;

#define KUKAPROG 0x20000002
#define KUKAVERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define INITIALIZE 1
extern  kukaVar_t * initialize_1(void *, CLIENT *);
extern  kukaVar_t * initialize_1_svc(void *, struct svc_req *);
#define UNINITIALIZE 2
extern  kukaVar_t * uninitialize_1(void *, CLIENT *);
extern  kukaVar_t * uninitialize_1_svc(void *, struct svc_req *);
#define GETVAR 11
extern  kukaVar_t * getvar_1(kukaVar_t *, CLIENT *);
extern  kukaVar_t * getvar_1_svc(kukaVar_t *, struct svc_req *);
#define SETVAR 12
extern  kukaVar_t * setvar_1(kukaVar_t *, CLIENT *);
extern  kukaVar_t * setvar_1_svc(kukaVar_t *, struct svc_req *);
#define LOADMODULE 21
extern  kukaVar_t * loadmodule_1(char **, CLIENT *);
extern  kukaVar_t * loadmodule_1_svc(char **, struct svc_req *);
#define UNLOADMODULE 22
extern  kukaVar_t * unloadmodule_1(void *, CLIENT *);
extern  kukaVar_t * unloadmodule_1_svc(void *, struct svc_req *);
#define GETCROSSERROR 31
extern  kukaVar_t * getcrosserror_1(void *, CLIENT *);
extern  kukaVar_t * getcrosserror_1_svc(void *, struct svc_req *);
extern int kukaprog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define INITIALIZE 1
extern  kukaVar_t * initialize_1();
extern  kukaVar_t * initialize_1_svc();
#define UNINITIALIZE 2
extern  kukaVar_t * uninitialize_1();
extern  kukaVar_t * uninitialize_1_svc();
#define GETVAR 11
extern  kukaVar_t * getvar_1();
extern  kukaVar_t * getvar_1_svc();
#define SETVAR 12
extern  kukaVar_t * setvar_1();
extern  kukaVar_t * setvar_1_svc();
#define LOADMODULE 21
extern  kukaVar_t * loadmodule_1();
extern  kukaVar_t * loadmodule_1_svc();
#define UNLOADMODULE 22
extern  kukaVar_t * unloadmodule_1();
extern  kukaVar_t * unloadmodule_1_svc();
#define GETCROSSERROR 31
extern  kukaVar_t * getcrosserror_1();
extern  kukaVar_t * getcrosserror_1_svc();
extern int kukaprog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_kukaReal_t (XDR *, kukaReal_t*);
extern  bool_t xdr_kukaInt_t (XDR *, kukaInt_t*);
extern  bool_t xdr_kukaBool_t (XDR *, kukaBool_t*);
extern  bool_t xdr_kukaChar_t (XDR *, kukaChar_t*);
extern  bool_t xdr_kukaString_t (XDR *, kukaString_t);
extern  bool_t xdr_kukaAxis_s (XDR *, kukaAxis_s*);
extern  bool_t xdr_kukaAxis_t (XDR *, kukaAxis_t*);
extern  bool_t xdr_kukaFrame_s (XDR *, kukaFrame_s*);
extern  bool_t xdr_kukaFrame_t (XDR *, kukaFrame_t*);
extern  bool_t xdr_kukaPos_s (XDR *, kukaPos_s*);
extern  bool_t xdr_kukaPos_t (XDR *, kukaPos_t*);
extern  bool_t xdr_kukaErrorType_e (XDR *, kukaErrorType_e*);
extern  bool_t xdr_kukaErrorType_t (XDR *, kukaErrorType_t*);
extern  bool_t xdr_kukaError_s (XDR *, kukaError_s*);
extern  bool_t xdr_kukaError_t (XDR *, kukaError_t*);
extern  bool_t xdr_kukaType_e (XDR *, kukaType_e*);
extern  bool_t xdr_kukaType_t (XDR *, kukaType_t*);
extern  bool_t xdr_kukaVal (XDR *, kukaVal*);
extern  bool_t xdr_kukaVar_s (XDR *, kukaVar_s*);
extern  bool_t xdr_kukaVar_t (XDR *, kukaVar_t*);

#else /* K&R C */
extern bool_t xdr_kukaReal_t ();
extern bool_t xdr_kukaInt_t ();
extern bool_t xdr_kukaBool_t ();
extern bool_t xdr_kukaChar_t ();
extern bool_t xdr_kukaString_t ();
extern bool_t xdr_kukaAxis_s ();
extern bool_t xdr_kukaAxis_t ();
extern bool_t xdr_kukaFrame_s ();
extern bool_t xdr_kukaFrame_t ();
extern bool_t xdr_kukaPos_s ();
extern bool_t xdr_kukaPos_t ();
extern bool_t xdr_kukaErrorType_e ();
extern bool_t xdr_kukaErrorType_t ();
extern bool_t xdr_kukaError_s ();
extern bool_t xdr_kukaError_t ();
extern bool_t xdr_kukaType_e ();
extern bool_t xdr_kukaType_t ();
extern bool_t xdr_kukaVal ();
extern bool_t xdr_kukaVar_s ();
extern bool_t xdr_kukaVar_t ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_KUKA_H_RPCGEN */
